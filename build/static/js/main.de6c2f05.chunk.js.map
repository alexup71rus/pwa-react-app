{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readyToAdd","successfullyInstalled","acceptedInstall","declinedInstall","addToHome","bind","assertThisInitialized","shouldShowAddButton","openWindowOrTab","_this2","window","matchMedia","matches","console","log","setState","addEventListener","e","preventDefault","deferredPrompt","evt","_this3","prompt","userChoice","then","choiceResult","outcome","shouldShow","url","arguments","length","undefined","location","href","open","_this4","react_default","a","createElement","className","onClick","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.de6c2f05.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            readyToAdd: false,\r\n            successfullyInstalled: false,\r\n            acceptedInstall: false,\r\n            declinedInstall: false,\r\n        };\r\n        this.addToHome = this.addToHome.bind(this);\r\n        this.shouldShowAddButton = this.shouldShowAddButton.bind(this);\r\n        this.openWindowOrTab = this.openWindowOrTab.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        // check if user is already running app from home screen\r\n        if (window.matchMedia('(display-mode: standalone)').matches) {\r\n            console.log('App is already installed and running in standalone');\r\n            this.setState({\r\n                successfullyInstalled: true,\r\n            });\r\n        } else {\r\n            window.addEventListener('beforeinstallprompt', e => {\r\n                console.log('beforeinstallprompt has fired', e);\r\n                // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n                e.preventDefault();\r\n                // Stash the event so it can be triggered later.\r\n                window.deferredPrompt = e;\r\n                this.setState({\r\n                    readyToAdd: true,\r\n                });\r\n            });\r\n            // this event fires only when app is installed\r\n            window.addEventListener('appinstalled', evt => {\r\n                console.log('App was successfully installed');\r\n                this.setState({\r\n                    successfullyInstalled: true,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    addToHome() {\r\n        // Show the prompt\r\n        let { deferredPrompt } = window;\r\n        if (deferredPrompt) {\r\n            deferredPrompt.prompt();\r\n            // Wait for the user to respond to the prompt\r\n            deferredPrompt.userChoice.then(choiceResult => {\r\n                if (choiceResult.outcome === 'accepted') {\r\n                    console.log('User accepted the A2HS prompt');\r\n                    this.setState({\r\n                        acceptedInstall: true,\r\n                    });\r\n                } else {\r\n                    console.log('User dismissed the A2HS prompt');\r\n                    this.setState({\r\n                        declinedInstall: true,\r\n                    });\r\n                }\r\n                deferredPrompt = null;\r\n            });\r\n        }\r\n    }\r\n    shouldShowAddButton() {\r\n        let shouldShow =\r\n            this.state.readyToAdd &&\r\n            !this.state.successfullyInstalled &&\r\n            !this.state.acceptedInstall &&\r\n            !this.state.declinedInstall;\r\n        console.log('Should show add button', shouldShow);\r\n        return shouldShow;\r\n    }\r\n    openWindowOrTab(url = window.location.href) {\r\n        window.open(url, '_blank');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-bar\" />\r\n                <header className=\"App-header\">\r\n                    <h1>Experimenting with Desktop PWAs</h1>\r\n                    {this.shouldShowAddButton() ? (\r\n                        <button onClick={this.addToHome}>\r\n                            Add to Home Screen\r\n                        </button>\r\n                    ) : null}\r\n                    <a href=\"https://www.desktop-pwas.com/\">Deep link</a>\r\n                    <a href=\"https://developers.google.com/web/progressive-web-apps\">\r\n                        PWAs\r\n                    </a>\r\n                    <a href=\"https://developers.google.com/web/progressive-web-apps/desktop\">\r\n                        Desktop PWAs\r\n                    </a>\r\n                    <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/\">\r\n                        Install banners\r\n                    </a>\r\n                    <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\">\r\n                        Manifest\r\n                    </a>\r\n                    <a href=\"https://love2dev.com/blog/beforeinstallprompt/\">\r\n                        Understanding beforeinstallprompt\r\n                    </a>\r\n                    <a href=\"chrome://flags/\">Chrome Flags</a>\r\n                    <a onClick={this.openWindowOrTab}>\r\n                        window.open() in new window/tab for same domain\r\n                    </a>\r\n                    <a\r\n                        onClick={() =>\r\n                            this.openWindowOrTab('https://www.google.com/')\r\n                        }>\r\n                        window.open() in new window/tab for different domain\r\n                    </a>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}